rg=opnsense-s2s-vti-bgp-opnsense
location='centralindia'
vm_image=$(az vm image list -l $location -p thefreebsdfoundation --sku 14_2-release-zfs --all --query "[?offer=='freebsd-14_2'].urn" -o tsv | tr -d '\r') && echo $vm_image
az vm image terms accept --urn $vm_image -o none
site1_vnet_name='site1'
site1_vnet_address='10.1.0.0/16'
site1_fw_subnet_name='fw'
site1_fw_subnet_address='10.1.0.0/24'
site1_vm_subnet_name='vm'
site1_vm_subnet_address='10.1.1.0/24'
site1_fw_vti_ip=192.168.1.1
site1_fw_asn=65551

s1spoke_vnet_name=s1spoke
s1spoke_vnet_address=10.11.0.0/16
s1spoke_vm_subnet_name=vm
s1spoke_vm_subnet_address=10.11.1.0/24

site2_vnet_name='site2'
site2_vnet_address='10.2.0.0/16'
site2_fw_subnet_name='fw'
site2_fw_subnet_address='10.2.0.0/24'
site2_vm_subnet_name='vm'
site2_vm_subnet_address='10.2.1.0/24'
site2_fw_vti_ip=192.168.1.2
site2_fw_asn=65552

s2spoke_vnet_name=s2spoke
s2spoke_vnet_address=10.12.0.0/16
s2spoke_vm_subnet_name=vm
s2spoke_vm_subnet_address=10.12.1.0/24

vm_size=Standard_B2ats_v2
admin_username=$(whoami)
admin_password='Test#123#123'
myip=$(curl -s4 https://ifconfig.co/)

cloud_init_file=cloud_init.sh
cat <<EOF > $cloud_init_file
#!/usr/local/bin/bash
echo $admin_password | sudo -S pkg update
sudo pkg upgrade -y
sed 's/#PermitRootLogin no/PermitRootLogin yes/g' /etc/ssh/sshd_config > /tmp/sshd_config
sudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config_tmp
sudo mv /tmp/sshd_config /etc/ssh/sshd_config
sudo /etc/rc.d/sshd restart
fetch https://raw.githubusercontent.com/opnsense/update/master/src/bootstrap/opnsense-bootstrap.sh.in
sed 's/reboot/#reboot/' opnsense-bootstrap.sh.in >opnsense-bootstrap.sh.in.tmp
mv opnsense-bootstrap.sh.in.tmp opnsense-bootstrap.sh.in
sed 's/set -e/#set -e/' opnsense-bootstrap.sh.in >opnsense-bootstrap.sh.in.tmp
mv opnsense-bootstrap.sh.in.tmp opnsense-bootstrap.sh.in
sudo chmod +x opnsense-bootstrap.sh.in
sudo sh ~/opnsense-bootstrap.sh.in -y -r 25.7
sudo cp ~/config.xml /usr/local/etc/config.xml
sudo pkg update 
sudo pkg upgrade -y
sudo pkg install -y bash git py311-setuptools-63.1.0_3
sudo ln -s /usr/local/bin/python3.11 /usr/local/bin/python
git -c http.sslVerify=false clone https://github.com/Azure/WALinuxAgent.git
cd ~/WALinuxAgent/
git checkout v2.13.1.1
sudo python setup.py install --register-service --force
sudo reboot
EOF

# create resource group
echo -e "\e[1;36mCreating $rg resource group...\e[0m"
az group create -l $location -n $rg -o none

# site1 vnet
echo -e "\e[1;36mCreating $site1_vnet_name VNet...\e[0m"
az network vnet create -g $rg -n $site1_vnet_name -l $location --address-prefixes $site1_vnet_address --subnet-name $site1_vm_subnet_name --subnet-prefixes $site1_vm_subnet_address -o none
az network vnet subnet create -g $rg -n $site1_fw_subnet_name --address-prefixes $site1_fw_subnet_address --vnet-name $site1_vnet_name -o none

# Create site1 opnsense VM 
echo -e "\e[1;36mCreating $site1_vnet_name-fw VM...\e[0m"
az network public-ip create -g $rg -n $site1_vnet_name-fw -l $location --allocation-method Static --sku Basic -o none
az network nic create -g $rg -n $site1_vnet_name-fw-wan --subnet $site1_fw_subnet_name --vnet-name $site1_vnet_name --ip-forwarding true --private-ip-address 10.1.0.250 --public-ip-address $site1_vnet_name-fw -o none
az network nic create -g $rg -n $site1_vnet_name-fw-lan --subnet $site1_vm_subnet_name --vnet-name $site1_vnet_name --ip-forwarding true --private-ip-address 10.1.1.250 -o none
az vm create -g $rg -n $site1_vnet_name-fw --image $vm_image --nics $site1_vnet_name-fw-wan $site1_vnet_name-fw-lan --os-disk-name $site1_vnet_name-fw --size Standard_B2als_v2 --no-wait -o none
site1_fw_public_ip=$(az network public-ip show -g $rg -n $site1_vnet_name-fw --query 'ipAddress' -o tsv | tr -d '\r') && echo $site1_vnet_name-fw public ip: $site1_fw_public_ip
site1_fw_wan_private_ip=$(az network nic show -g $rg -n $site1_vnet_name-fw-wan --query ipConfigurations[].privateIPAddress -o tsv | tr -d '\r') && echo $site1_vnet_name-fw wan private IP: $site1_fw_wan_private_ip
site1_fw_lan_private_ip=$(az network nic show -g $rg -n $site1_vnet_name-fw-lan --query ipConfigurations[].privateIPAddress -o tsv | tr -d '\r') && echo $site1_vnet_name-fw lan private IP: $site1_fw_lan_private_ip

# site2 vnet
echo -e "\e[1;36mCreating $site2_vnet_name VNet...\e[0m"
az network vnet create -g $rg -n $site2_vnet_name -l $location --address-prefixes $site2_vnet_address --subnet-name $site2_vm_subnet_name --subnet-prefixes $site2_vm_subnet_address -o none
az network vnet subnet create -g $rg -n $site2_fw_subnet_name --address-prefixes $site2_fw_subnet_address --vnet-name $site2_vnet_name -o none

# Create site2 opnsense VM
echo -e "\e[1;36mCreating $site2_vnet_name-fw VM...\e[0m"
az network public-ip create -g $rg -n $site2_vnet_name-fw -l $location --allocation-method Static --sku Basic -o none
az network nic create -g $rg -n $site2_vnet_name-fw-wan --subnet $site2_fw_subnet_name --vnet-name $site2_vnet_name --ip-forwarding true --private-ip-address 10.2.0.250 --public-ip-address $site2_vnet_name-fw -o none
az network nic create -g $rg -n $site2_vnet_name-fw-lan --subnet $site2_vm_subnet_name --vnet-name $site2_vnet_name --ip-forwarding true --private-ip-address 10.2.1.250 -o none
az vm create -g $rg -n $site2_vnet_name-fw --image $vm_image --nics $site2_vnet_name-fw-wan $site2_vnet_name-fw-lan --os-disk-name $site2_vnet_name-fw --size Standard_B2als_v2 --no-wait -o none
site2_fw_public_ip=$(az network public-ip show -g $rg -n $site2_vnet_name-fw --query 'ipAddress' -o tsv | tr -d '\r') && echo $site2_vnet_name-fw public ip: $site2_fw_public_ip
site2_fw_wan_private_ip=$(az network nic show -g $rg -n $site2_vnet_name-fw-wan --query ipConfigurations[].privateIPAddress -o tsv | tr -d '\r') && echo $site2_vnet_name-fw wan private IP: $site2_fw_wan_private_ip
site2_fw_lan_private_ip=$(az network nic show -g $rg -n $site2_vnet_name-fw-lan --query ipConfigurations[].privateIPAddress -o tsv | tr -d '\r') && echo $site2_vnet_name-fw lan private IP: $site2_fw_lan_private_ip

# create s1spoke vnet
echo -e "\e[1;36mCreating $s1spoke_vnet_name VNet...\e[0m"
az network vnet create -g $rg -n $s1spoke_vnet_name -l $location --address-prefixes $s1spoke_vnet_address --subnet-name $s1spoke_vm_subnet_name --subnet-prefixes $s1spoke_vm_subnet_address -o none

# create s2spoke vnet
echo -e "\e[1;36mCreating $s2spoke_vnet_name VNet...\e[0m"
az network vnet create -g $rg -n $s2spoke_vnet_name -l $location --address-prefixes $s2spoke_vnet_address --subnet-name $s2spoke_vm_subnet_name --subnet-prefixes $s2spoke_vm_subnet_address -o none

# site1 vm
echo -e "\e[1;36mCreating $site1_vnet_name VM...\e[0m"
az network nic create -g $rg -n "$site1_vnet_name" -l $location --vnet-name $site1_vnet_name --subnet $site1_vm_subnet_name -o none
az vm create -g $rg -n $site1_vnet_name -l $location --image Ubuntu2404 --nics "$site1_vnet_name" --os-disk-name "$site1_vnet_name" --size $vm_size --admin-username $admin_username --generate-ssh-keys --no-wait -o none
site1_vm_ip=$(az network nic show -g $rg -n $site1_vnet_name --query ipConfigurations[].privateIPAddress -o tsv | tr -d '\r') && echo $site1_vnet_name vm private ip: $site1_vm_ip

# site2 vm
echo -e "\e[1;36mCreating $site2_vnet_name VM...\e[0m"
az network nic create -g $rg -n "$site2_vnet_name" -l $location --vnet-name $site2_vnet_name --subnet $site2_vm_subnet_name -o none
az vm create -g $rg -n $site2_vnet_name -l $location --image Ubuntu2404 --nics "$site2_vnet_name" --os-disk-name "$site2_vnet_name" --size $vm_size --admin-username $admin_username --generate-ssh-keys --no-wait -o none
site2_vm_ip=$(az network nic show -g $rg -n $site2_vnet_name --query ipConfigurations[].privateIPAddress -o tsv | tr -d '\r') && echo $site2_vnet_name vm private ip: $site2_vm_ip

# s1spoke vm
echo -e "\e[1;36mCreating $s1spoke_vnet_name VM...\e[0m"
az network nic create -g $rg -n "$s1spoke_vnet_name" -l $location --vnet-name $s1spoke_vnet_name --subnet $s1spoke_vm_subnet_name -o none
az vm create -g $rg -n $s1spoke_vnet_name -l $location --image Ubuntu2404 --nics "$s1spoke_vnet_name" --os-disk-name "$s1spoke_vnet_name" --size $vm_size --admin-username $admin_username --generate-ssh-keys --no-wait -o none
s1spoke_vm_ip=$(az network nic show -g $rg -n $s1spoke_vnet_name --query ipConfigurations[].privateIPAddress -o tsv | tr -d '\r') && echo $s1spoke_vnet_name vm private ip: $s1spoke_vm_ip

# s2spoke vm
echo -e "\e[1;36mCreating $s2spoke_vnet_name VM...\e[0m"
az network nic create -g $rg -n "$s2spoke_vnet_name" -l $location --vnet-name $s2spoke_vnet_name --subnet $s2spoke_vm_subnet_name -o none
az vm create -g $rg -n $s2spoke_vnet_name -l $location --image Ubuntu2404 --nics "$s2spoke_vnet_name" --os-disk-name "$s2spoke_vnet_name" --size $vm_size --admin-username $admin_username --generate-ssh-keys --no-wait -o none
s2spoke_vm_ip=$(az network nic show -g $rg -n $s2spoke_vnet_name --query ipConfigurations[].privateIPAddress -o tsv | tr -d '\r') && echo $s2spoke_vnet_name vm private ip: $s2spoke_vm_ip

# Create VNet peering between site1 and s1spoke
echo -e "\e[1;36mCreating VNet peering between $site1_vnet_name and $s1spoke_vnet_name...\e[0m"
az network vnet peering create -g $rg -n $site1_vnet_name-peering --remote-vnet $site1_vnet_name --vnet-name $s1spoke_vnet_name --allow-vnet-access -o none
az network vnet peering create -g $rg -n $s1spoke_vnet_name-peering --remote-vnet $s1spoke_vnet_name --vnet-name $site1_vnet_name --allow-vnet-access --allow-forwarded-traffic -o none

# Create VNet peering between site2 and s2spoke
echo -e "\e[1;36mCreating VNet peering between $site2_vnet_name and $s2spoke_vnet_name...\e[0m"
az network vnet peering create -g $rg -n $site2_vnet_name-peering --remote-vnet $site2_vnet_name --vnet-name $s2spoke_vnet_name --allow-vnet-access -o none
az network vnet peering create -g $rg -n $s2spoke_vnet_name-peering --remote-vnet $s2spoke_vnet_name --vnet-name $site2_vnet_name --allow-vnet-access --allow-forwarded-traffic -o none

# site1 route table
echo -e "\e[1;36mCreating $site1_vnet_name route table....\e[0m"
az network route-table create -g $rg -n $site1_vnet_name -l $location --disable-bgp-route-propagation true -o none
az network route-table route create -g $rg -n to-s1spoke --address-prefix $s1spoke_vnet_address --next-hop-type virtualappliance --route-table-name $site1_vnet_name --next-hop-ip-address $site1_fw_lan_private_ip -o none
az network route-table route create -g $rg -n to-site2 --address-prefix $site2_vnet_address --next-hop-type virtualappliance --route-table-name $site1_vnet_name --next-hop-ip-address $site1_fw_lan_private_ip -o none
az network route-table route create -g $rg -n to-s2spoke --address-prefix $s2spoke_vnet_address --next-hop-type virtualappliance --route-table-name $site1_vnet_name --next-hop-ip-address $site1_fw_lan_private_ip -o none
az network route-table route create -g $rg -n to-site1-vti --address-prefix ${site1_fw_vti_ip}/32 --next-hop-type virtualappliance --route-table-name $site1_vnet_name --next-hop-ip-address $site1_fw_lan_private_ip -o none
az network route-table route create -g $rg -n to-site2-vti --address-prefix ${site2_fw_vti_ip}/32 --next-hop-type virtualappliance --route-table-name $site1_vnet_name --next-hop-ip-address $site1_fw_lan_private_ip -o none
az network vnet subnet update -g $rg -n $site1_vm_subnet_name --vnet-name $site1_vnet_name --route-table $site1_vnet_name -o none

# s1spoke route table
echo -e "\e[1;36mCreating $s1spoke_vnet_name route table....\e[0m"
az network route-table create -g $rg -n $s1spoke_vnet_name -l $location --disable-bgp-route-propagation true -o none
az network route-table route create -g $rg -n to-site1 --address-prefix $site1_vnet_address --next-hop-type virtualappliance --route-table-name $s1spoke_vnet_name --next-hop-ip-address $site1_fw_lan_private_ip -o none
az network route-table route create -g $rg -n to-site2 --address-prefix $site2_vnet_address --next-hop-type virtualappliance --route-table-name $s1spoke_vnet_name --next-hop-ip-address $site1_fw_lan_private_ip -o none
az network route-table route create -g $rg -n to-s2spoke --address-prefix $s2spoke_vnet_address --next-hop-type virtualappliance --route-table-name $s1spoke_vnet_name --next-hop-ip-address $site1_fw_lan_private_ip -o none
az network route-table route create -g $rg -n to-site1-vti --address-prefix ${site1_fw_vti_ip}/32 --next-hop-type virtualappliance --route-table-name $s1spoke_vnet_name --next-hop-ip-address $site1_fw_lan_private_ip -o none
az network route-table route create -g $rg -n to-site2-vti --address-prefix ${site2_fw_vti_ip}/32 --next-hop-type virtualappliance --route-table-name $s1spoke_vnet_name --next-hop-ip-address $site1_fw_lan_private_ip -o none
az network vnet subnet update -g $rg -n $s1spoke_vm_subnet_name --vnet-name $s1spoke_vnet_name --route-table $s1spoke_vnet_name -o none

# site2 route table
echo -e "\e[1;36mCreating $site2_vnet_name route table....\e[0m"
az network route-table create -g $rg -n $site2_vnet_name -l $location --disable-bgp-route-propagation true -o none
az network route-table route create -g $rg -n to-s2spoke --address-prefix $s2spoke_vnet_address --next-hop-type virtualappliance --route-table-name $site2_vnet_name --next-hop-ip-address $site2_fw_lan_private_ip -o none
az network route-table route create -g $rg -n to-site1 --address-prefix $site1_vnet_address --next-hop-type virtualappliance --route-table-name $site2_vnet_name --next-hop-ip-address $site2_fw_lan_private_ip -o none
az network route-table route create -g $rg -n to-s1spoke --address-prefix $s1spoke_vnet_address --next-hop-type virtualappliance --route-table-name $site2_vnet_name --next-hop-ip-address $site2_fw_lan_private_ip -o none
az network route-table route create -g $rg -n to-site1-vti --address-prefix ${site1_fw_vti_ip}/32 --next-hop-type virtualappliance --route-table-name $site2_vnet_name --next-hop-ip-address $site2_fw_lan_private_ip -o none
az network route-table route create -g $rg -n to-site2-vti --address-prefix ${site2_fw_vti_ip}/32 --next-hop-type virtualappliance --route-table-name $site2_vnet_name --next-hop-ip-address $site2_fw_lan_private_ip -o none
az network vnet subnet update -g $rg -n $site2_vm_subnet_name --vnet-name $site2_vnet_name --route-table $site2_vnet_name -o none

# s2spoke route table
echo -e "\e[1;36mCreating $s2spoke_vnet_name route table....\e[0m"
az network route-table create -g $rg -n $s2spoke_vnet_name -l $location --disable-bgp-route-propagation true -o none
az network route-table route create -g $rg -n to-site1 --address-prefix $site1_vnet_address --next-hop-type virtualappliance --route-table-name $s2spoke_vnet_name --next-hop-ip-address $site2_fw_lan_private_ip -o none
az network route-table route create -g $rg -n to-site2 --address-prefix $site2_vnet_address --next-hop-type virtualappliance --route-table-name $s2spoke_vnet_name --next-hop-ip-address $site2_fw_lan_private_ip -o none
az network route-table route create -g $rg -n to-s1spoke --address-prefix $s1spoke_vnet_address --next-hop-type virtualappliance --route-table-name $s2spoke_vnet_name --next-hop-ip-address $site2_fw_lan_private_ip -o none
az network route-table route create -g $rg -n to-site1-vti --address-prefix ${site1_fw_vti_ip}/32 --next-hop-type virtualappliance --route-table-name $s2spoke_vnet_name --next-hop-ip-address $site2_fw_lan_private_ip -o none
az network route-table route create -g $rg -n to-site2-vti --address-prefix ${site2_fw_vti_ip}/32 --next-hop-type virtualappliance --route-table-name $s2spoke_vnet_name --next-hop-ip-address $site2_fw_lan_private_ip -o none
az network vnet subnet update -g $rg -n $s2spoke_vm_subnet_name --vnet-name $s2spoke_vnet_name --route-table $s2spoke_vnet_name -o none

# donwload initial config for opnsense 
config_file=~/config.xml
curl -o $config_file https://raw.githubusercontent.com/wshamroukh/opnsense-azure-vm/refs/heads/main/config.xml

# site1 opnsense bootstrap
echo -e "\e[1;36mCopying configuration files to $site1_vnet_name-fw and installing opnsense firewall...\e[0m"
scp -o StrictHostKeyChecking=no $cloud_init_file $config_file $admin_username@$site1_fw_public_ip:/home/$admin_username
ssh -o StrictHostKeyChecking=no $admin_username@$site1_fw_public_ip "chmod +x /home/$admin_username/cloud_init.sh && sh /home/$admin_username/cloud_init.sh"

# site2 opnsense bootstrap
echo -e "\e[1;36mCopying configuration files to $site2_vnet_name-fw and installing opnsense firewall...\e[0m"
scp -o StrictHostKeyChecking=no $cloud_init_file $config_file $admin_username@$site2_fw_public_ip:/home/$admin_username
ssh -o StrictHostKeyChecking=no $admin_username@$site2_fw_public_ip "chmod +x /home/$admin_username/cloud_init.sh && sh /home/$admin_username/cloud_init.sh"

# clean up cloud init and config files
rm $cloud_init_file $config_file

# Download config files
site1_config=~/site1_vti_bgp_config.xml
curl -o $site1_config https://raw.githubusercontent.com/wshamroukh/s2s-opnsense/refs/heads/main/opnsense-vti-bgp-site1.xml
sed -i -e "s/4\.188\.249\.194/${site1_fw_public_ip}/g" -e "s/74\.225\.146\.52/${site2_fw_public_ip}/g" $site1_config
site2_config=~/site2_vti_bgp_config.xml
curl -o $site2_config https://raw.githubusercontent.com/wshamroukh/s2s-opnsense/refs/heads/main/opnsense-vti-bgp-site2.xml
sed -i -e "s/4\.188\.249\.194/${site1_fw_public_ip}/g" -e "s/74\.225\.146\.52/${site2_fw_public_ip}/g" $site2_config

# wait for pfsense to boot up
sleep 60

# Copying config files to site1 pfsense
echo -e "\e[1;36mCopying configuration files to $site1_vnet_name-fw and installing opnsense firewall...\e[0m"
ssh-keygen -R $site1_fw_public_ip
scp -o StrictHostKeyChecking=no ~/.ssh/* root@$site1_fw_public_ip:/root/.ssh/
scp -o StrictHostKeyChecking=no $site1_config root@$site1_fw_public_ip:/conf/config.xml
echo -e "\e[1;36mEnable FRR (BGP) and then reboot $site1_vnet_name-fw after importing the config file...\e[0m"
ssh -o StrictHostKeyChecking=no root@$site1_fw_public_ip "pkg install -y os-frr && sudo reboot"

# Copying config files to site2 pfsense
echo -e "\e[1;36mCopying configuration files to $site2_vnet_name-fw and installing opnsense firewall...\e[0m"
ssh-keygen -R $site2_fw_public_ip
scp -o StrictHostKeyChecking=no ~/.ssh/* root@$site2_fw_public_ip:/root/.ssh/
scp -o StrictHostKeyChecking=no $site2_config root@$site2_fw_public_ip:/conf/config.xml
echo -e "\e[1;36mEnable FRR (BGP) and then reboot $site2_vnet_name-fw after importing the config file...\e[0m"
ssh -o StrictHostKeyChecking=no root@$site2_fw_public_ip "pkg install -y os-frr && sudo reboot"

# clean up config files
rm $site1_config $site2_config

# wait for pfsense to boot up
echo -e "\e[1;36mWaiting for pfsense to boot up...\e[0m"
sleep 60

echo -e "\e[1;36mChecking connectivity from $site1_vnet_name-fw to rest of network...\e[0m"
ssh -o StrictHostKeyChecking=no root@$site1_fw_public_ip "ping -c 3 $site2_fw_vti_ip && ping -c 3 $site2_fw_wan_private_ip && ping -c 3 $site2_fw_lan_private_ip && ping -c 3 $site2_vm_ip && ping -c 3 $s1spoke_vm_ip && ping -c 3 $s2spoke_vm_ip"
ssh -o StrictHostKeyChecking=no root@$site1_fw_public_ip "vtysh -c 'show bgp summary' && vtysh -c 'show ip route' && vtysh -c 'show ip bgp'"

echo -e "\e[1;36mChecking connectivity from $site2_vnet_name-fw to rest of network...\e[0m"
ssh -o StrictHostKeyChecking=no root@$site2_fw_public_ip "ping -c 3 $site1_fw_vti_ip && ping -c 3 $site1_fw_wan_private_ip && ping -c 3 $site1_fw_lan_private_ip && ping -c 3 $site1_vm_ip && ping -c 3 $s1spoke_vm_ip && ping -c 3 $s2spoke_vm_ip"
ssh -o StrictHostKeyChecking=no root@$site2_fw_public_ip "vtysh -c 'show bgp summary' && vtysh -c 'show ip route' && vtysh -c 'show ip bgp'"

echo -e "\e[1;36mChecking connectivity from $site1_vnet_name to rest of network...\e[0m"
ssh -o StrictHostKeyChecking=no root@$site1_fw_public_ip "ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $admin_username@$site1_vm_ip 'ping -c 3 $site2_vm_ip && ping -c 3 $s1spoke_vm_ip && ping -c 3 $s2spoke_vm_ip'"

echo -e "\e[1;36mChecking connectivity from $site2_vnet_name to rest of network...\e[0m"
ssh -o StrictHostKeyChecking=no root@$site1_fw_public_ip "ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $admin_username@$site2_vm_ip 'ping -c 3 $site1_vm_ip && ping -c 3 $s1spoke_vm_ip && ping -c 3 $s2spoke_vm_ip'"

echo -e "\e[1;36mChecking connectivity from $s1spoke_vnet_name to rest of network...\e[0m"
ssh -o StrictHostKeyChecking=no root@$site1_fw_public_ip "ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $admin_username@$s1spoke_vm_ip 'ping -c 3 $site1_vm_ip && ping -c 3 $site2_vm_ip && ping -c 3 $s2spoke_vm_ip'"

echo -e "\e[1;36mChecking connectivity from $s2spoke_vnet_name to rest of network...\e[0m"
ssh -o StrictHostKeyChecking=no root@$site1_fw_public_ip "ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $admin_username@$s2spoke_vm_ip 'ping -c 3 $site1_vm_ip && ping -c 3 $site2_vm_ip && ping -c 3 $s1spoke_vm_ip'"

# Follow this documentation to configure opnsense ipsec s2s vpn between the two sites: https://docs.opnsense.org/manual/how-tos/ipsec-s2s-conn-route.html but take the following into account:
# 1. While creating the Virtual Tunnel Interfaces (VTI) set the local address to the private IP address on the WAN interface of the opnsense and remote address is the public ip address of the other opnsense
# 2. In General Settings set 'Local addresses' to the private IP address on the WAN interface of the opnsense while 'Remote addresses' should be set to the Public IP address of the other opnsense


# az group delete -n $rg -y --no-wait